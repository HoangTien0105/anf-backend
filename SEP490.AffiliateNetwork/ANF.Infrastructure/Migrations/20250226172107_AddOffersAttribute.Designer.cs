// <auto-generated />
using System;
using ANF.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ANF.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250226172107_AddOffersAttribute")]
    partial class AddOffersAttribute
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ANF.Core.Models.Entities.AdvertiserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("adv_no");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AdvertiserId")
                        .HasColumnType("bigint")
                        .HasColumnName("advertiser_id");

                    b.Property<string>("BankingNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("banking_no");

                    b.Property<string>("BankingProvider")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("banking_provider");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("company_name");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("industry");

                    b.HasKey("Id");

                    b.HasIndex("AdvertiserId")
                        .IsUnique();

                    b.ToTable("AdvertiserProfiles");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.Campaign", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("camp_id");

                    b.Property<long>("AdvertiserId")
                        .HasColumnType("bigint")
                        .HasColumnName("advertiser_id");

                    b.Property<double>("Balance")
                        .HasColumnType("float")
                        .HasColumnName("balance");

                    b.Property<double>("Budget")
                        .HasColumnType("float")
                        .HasColumnName("budget");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("cate_id");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("camp_name");

                    b.Property<string>("ProductUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("product_url");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("camp_status");

                    b.Property<string>("TrackingParams")
                        .HasColumnType("text")
                        .HasColumnName("tracking_params");

                    b.HasKey("Id");

                    b.HasIndex("AdvertiserId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("cate_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cate_name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("img_no");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CampaignId")
                        .HasColumnType("bigint")
                        .HasColumnName("campaign_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("img_url");

                    b.Property<long?>("OfferId")
                        .HasColumnType("bigint")
                        .HasColumnName("offer_id");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("thumbnail");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("OfferId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.Offer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("offer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CampaignId")
                        .HasColumnType("bigint")
                        .HasColumnName("camp_id");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("offer_note");

                    b.Property<string>("PricingModel")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pricing_model");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.PublisherProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("pub_no");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BankingNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("banking_no");

                    b.Property<string>("BankingProvider")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("banking_provider");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<long>("PublisherId")
                        .HasColumnType("bigint")
                        .HasColumnName("publisher_id");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("specialization");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId")
                        .IsUnique();

                    b.ToTable("PublisherProfiles");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.PublisherSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("pubs_no");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Provider")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("provider");

                    b.Property<long>("PublisherId")
                        .HasColumnType("bigint")
                        .HasColumnName("publisher_id");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("soruce_url");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("PublisherSources");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.SubPurchase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("subp_no");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AdvertiserId")
                        .HasColumnType("bigint")
                        .HasColumnName("advertiser_id");

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("float")
                        .HasColumnName("current_price");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("expired_at");

                    b.Property<DateTime>("PurchasedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("purchased_at");

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("sub_id");

                    b.HasKey("Id");

                    b.HasIndex("AdvertiserId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubPurchases");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("sub_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("duration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sub_name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("sub_price");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("CitizenId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("citizen_id");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_email");

                    b.Property<bool?>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("user_role");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("user_status");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            CitizenId = "JS123456789",
                            Email = "john.smith@email.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Smith",
                            Password = "hashed_password_1",
                            PhoneNumber = "555-0123",
                            Role = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 101L,
                            CitizenId = "SJ987654321",
                            Email = "sarah.j@email.com",
                            EmailConfirmed = true,
                            FirstName = "Sarah",
                            LastName = "Johnson",
                            Password = "hashed_password_2",
                            PhoneNumber = "555-0124",
                            Role = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 103L,
                            Email = "saffiliatenetwork@gmail.com",
                            EmailConfirmed = true,
                            Password = "superstrongpassword123@",
                            Role = 0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.AdvertiserProfile", b =>
                {
                    b.HasOne("ANF.Core.Models.Entities.User", "Advertiser")
                        .WithOne("AdvertiserProfile")
                        .HasForeignKey("ANF.Core.Models.Entities.AdvertiserProfile", "AdvertiserId");

                    b.Navigation("Advertiser");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.Campaign", b =>
                {
                    b.HasOne("ANF.Core.Models.Entities.User", "Advertiser")
                        .WithMany("Campaigns")
                        .HasForeignKey("AdvertiserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ANF.Core.Models.Entities.Category", "Category")
                        .WithMany("Campaigns")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Advertiser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.Image", b =>
                {
                    b.HasOne("ANF.Core.Models.Entities.Campaign", "Campaign")
                        .WithMany("Images")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ANF.Core.Models.Entities.Offer", "Offer")
                        .WithMany("Images")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Campaign");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.Offer", b =>
                {
                    b.HasOne("ANF.Core.Models.Entities.Campaign", "Campaign")
                        .WithMany("Offers")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.PublisherProfile", b =>
                {
                    b.HasOne("ANF.Core.Models.Entities.User", "Publisher")
                        .WithOne("PublisherProfile")
                        .HasForeignKey("ANF.Core.Models.Entities.PublisherProfile", "PublisherId");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.PublisherSource", b =>
                {
                    b.HasOne("ANF.Core.Models.Entities.User", "Publisher")
                        .WithMany("AffiliateSources")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.SubPurchase", b =>
                {
                    b.HasOne("ANF.Core.Models.Entities.User", "Advertiser")
                        .WithMany("SubPurchases")
                        .HasForeignKey("AdvertiserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ANF.Core.Models.Entities.Subscription", "Subscription")
                        .WithMany("SubPurchases")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Advertiser");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.Campaign", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.Category", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.Offer", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.Subscription", b =>
                {
                    b.Navigation("SubPurchases");
                });

            modelBuilder.Entity("ANF.Core.Models.Entities.User", b =>
                {
                    b.Navigation("AdvertiserProfile")
                        .IsRequired();

                    b.Navigation("AffiliateSources");

                    b.Navigation("Campaigns");

                    b.Navigation("PublisherProfile")
                        .IsRequired();

                    b.Navigation("SubPurchases");
                });
#pragma warning restore 612, 618
        }
    }
}
